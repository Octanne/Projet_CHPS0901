/usr/include/c++/14.2.1/bits/new_allocator.h: 191 - 191
--------------------------------------------------------------------------------

191: 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
/usr/include/c++/14.2.1/bits/vector.tcc: 114 - 123
--------------------------------------------------------------------------------

114: 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
115: 	  {
116: 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
117: 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
118: 				     std::forward<_Args>(__args)...);
119: 	    ++this->_M_impl._M_finish;
120: 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
121: 	  }
122: 	else
123: 	  _M_realloc_append(std::forward<_Args>(__args)...);
/usr/include/c++/14.2.1/bits/stl_algobase.h: 262 - 262
--------------------------------------------------------------------------------

262:       if (__a < __b)
/usr/include/c++/14.2.1/bits/stl_iterator.h: 1068 - 1068
--------------------------------------------------------------------------------

1068:       : _M_current(__i) { }
/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp: 336 - 462
--------------------------------------------------------------------------------

336:     if (isDivided) {
337:         northeast->recycle();
338:         northwest->recycle();
339:         southeast->recycle();
340:         southwest->recycle();
341:     }
342:     nodePool.push_back(this);
343: }
344: 
345: void QuadTree::reset() {
346:     if (particle != nullptr && isDivided) {
347:         delete particle;
348: 
349:         northeast->reset();
350:         northwest->reset();
351:         southeast->reset();
352:         southwest->reset();
353:     }
354:     particle = nullptr;
355: 
356:     isDivided = false;
357:     hasBody = false;
358:     weightBranch = 0;
359:     width = 0;
360:     originX = 0;
361:     originY = 0;
362: 
363:     // We set the children to nullptr
364:     northeast = nullptr;
365:     northwest = nullptr;
366:     southeast = nullptr;
367:     southwest = nullptr;
368:     // particles = nullptr; // We do not delete the particles listes
369: }
[...]
411: bool QuadTree::buildTree() {
412:     // We build the tree
413:     if (particles == nullptr) {
414:         return false;
415:     }
416: 
417:     // We reset the tree if it was already built
418:     if (isDivided) {
419:         //if (debugMode()) std::cout << "Recycling the quadtree" << std::endl;
420:         // We recycle the quadtree to avoid memory allocation and deallocation but only the children
421:         // Because we are in the root node
422:         if (northeast != nullptr) northeast->recycle();
423:         if (northwest != nullptr) northwest->recycle();
424:         if (southeast != nullptr) southeast->recycle();
425:         if (southwest != nullptr) southwest->recycle();
[...]
440:     width = 0.0;
441:     // #pragma omp parallel for reduction(max:width) TODO future step
442:     for (Particle* particle : *particles) {
443:         double distance = std::max(std::abs(particle->getX()), std::abs(particle->getY()));
444:         if (distance > width) {
445:             width = distance;
[...]
452:     width *= 1.1;
453: 
454:     //if (debugMode()) std::cout << "Building the quadtree" << std::endl;
455:     // We insert the particles into the quadtree
456:     // PUT semaphore for the insertion on the different branches (QuadTree)
457:     for (Particle* particle : *particles) {
458:         insertSimple(particle);
459:     }
460: 
461:     return true;
462: }
/usr/include/c++/14.2.1/bits/std_abs.h: 72 - 72
--------------------------------------------------------------------------------

72:   { return __builtin_fabs(__x); }
