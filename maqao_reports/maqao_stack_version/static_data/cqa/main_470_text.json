{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_complex_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/usr/include/c++/14.2.1/bits/stl_vector.h:1131"
                ],
              "header": ""
            },
          "list_path_1_call_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:280",
                "/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:280",
                "/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:280"
                ],
              "header": ""
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500
                }
            }
        },
      "AVG":
        {
          "hint":
            [
              {
                "details": "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - QuadTree::calculateForce(Particle*, double&, double&) const: 3 occurrences<<list_path_1_call_1>>\n",
                "title": "CALL instructions",
                "txt": "Detected function call instructions.\n"
              },
              {
                "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - JMP: 1 occurrences<<list_path_1_complex_1>>\n",
                "title": "Complex instructions",
                "txt": "Detected COMPLEX INSTRUCTIONS.\n"
              },
              {
                "title": "Type of elements and instruction set",
                "txt": "6 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in scalar mode (one at a time).\n"
              },
              {
                "title": "Matching between your loop (in the source code) and the binary loop",
                "txt": "The binary loop is composed of 6 FP arithmetical operations:\n - 6: addition or subtraction\nThe binary loop is loading 268 bytes (33 double precision FP elements).\nThe binary loop is storing 112 bytes (14 double precision FP elements)."
              },
              {
                "title": "Arithmetic intensity",
                "txt": "Arithmetic intensity is 0.02 FP operations per loaded or stored byte."
              }
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 82\nnb uops            : 102\nloop length        : 364\nused x86 registers : 15\nused mmx registers : 0\nused xmm registers : 12\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 8\n"
              },
              {
                "title": "Front-end",
                "txt": "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 17.00 cycles\nfront end            : 17.00 cycles\n"
              },
              {
                "title": "Back-end",
                "txt": "       | ALU0/BRU0 | ALU1  | ALU2  | ALU3/BRU1 | AGU0  | AGU1  | AGU2  | FP0  | FP1  | FP2  | FP3\n--------------------------------------------------------------------------------------------------\nuops   | 10.25     | 10.25 | 10.25 | 10.25     | 18.50 | 18.50 | 13.00 | 0.00 | 0.00 | 6.00 | 6.00\ncycles | 10.25     | 10.25 | 10.25 | 10.25     | 18.50 | 18.50 | 13.00 | 0.00 | 0.00 | 6.00 | 6.00\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU, BRU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3/BRU1: ALU, BRU\n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2: store address\n - FP0 (256 bits): VPU\n - FP1 (256 bits): VPU\n - FP2 (256 bits): VPU, FP store data\n - FP3 (256 bits): VPU, DIV/SQRT\n\nCycles executing div or sqrt instructions: NA\nCycles loading/storing data              : 17.00\n"
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 17.00\nDispatch  : 18.50\nOverall L1: 18.50\n"
              },
              {
                "title": "Vectorization ratios",
                "txt": "INT\nall    : 0%\nload   : 0%\nstore  : 0%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 0%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 0%\nload    : 0%\nstore   : 0%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\nINT+FP\nall     : 0%\nload    : 0%\nstore   : 0%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\n"
              },
              {
                "title": "Vector efficiency ratios",
                "txt": "INT\nall    : 21%\nload   : 25%\nstore  : 15%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 25%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 25%\nFP\nall     : 25%\nload    : 25%\nstore   : 25%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 25%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\nINT+FP\nall     : 22%\nload    : 25%\nstore   : 19%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 25%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 25%\n"
              },
              {
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 18.50 cycles. At this rate:\n - 22% of peak load performance is reached (14.49 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 18% of peak store performance is reached (6.05 out of 32.00 bytes stored per cycle (GB/s @ 1GHz))\n"
              },
              {
                "title": "Front-end bottlenecks",
                "txt": "Found no such bottlenecks."
              },
              {
                "title": "ASM code",
                "txt": "In the binary file, the address of the loop is: 43020\n\nInstruction                                                 | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0 | AGU1 | AGU2 | FP0 | FP1 | FP2  | FP3  | Latency | Recip. throughput | Vectorization\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nMOV -0x60(%RBP),%RBX                                        | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOV -0x70(%RBP),%R12                                        | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOV 0x12411(%RIP),%RAX                                      | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOV (%RDI,%RBX,8),%RBX                                      | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOV 0x8(%R12),%RDI                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOVSXD (%RAX),%R9                                           | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | N/A\nMOV (%RDI),%RSI                                             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nLEA (%R9,%R9,2),%R8                                         | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | N/A\nLEA (%RSI,%R8,8),%R10                                       | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV 0x8(%R10),%RDX                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | scal (25.0%)\nMOV (%R10),%RCX                                             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOV %RDX,-0x68(%RBP)                                        | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 4       | 1                 | scal (25.0%)\nCMP %RCX,%RDX                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nJE 432a0 <_ZN8QuadTree15updateParticlesEd._omp_fn.1+0x700>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | N/A\nSUB %RCX,%RDX                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nMOV %RCX,%R13                                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.25              | N/A\nLEA -0x48(%RBP),%R12                                        | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV %RDX,%RAX                                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.25              | N/A\nSUB $0x8,%RAX                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | N/A\nSHR $0x3,%RAX                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | N/A\nINC %RAX                                                    | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | N/A\nAND $0x3,%EAX                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | N/A\nJE 43163 <_ZN8QuadTree15updateParticlesEd._omp_fn.1+0x5c3>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | N/A\nCMP $0x1,%RAX                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nJE 43114 <_ZN8QuadTree15updateParticlesEd._omp_fn.1+0x574>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | N/A\nCMP $0x2,%RAX                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nJE 430cf <_ZN8QuadTree15updateParticlesEd._omp_fn.1+0x52f>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | N/A\nMOV (%RCX),%RDI                                             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOV -0x58(%RBP),%RCX                                        | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOV %R12,%RDX                                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.25              | scal (25.0%)\nMOV %RBX,%RSI                                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.25              | N/A\nMOVQ $0,-0x48(%RBP)                                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 4       | 1                 | scal (12.5%)\nMOVQ $0,-0x40(%RBP)                                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 4       | 1                 | scal (12.5%)\nADD $0x8,%R13                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | N/A\nCALL 42100 <_ZNK8QuadTree14calculateForceEP8ParticleRdS2_>  | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 0       | 1                 | N/A\nVMOVSD (%R14),%XMM2                                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMOVSD (%R15),%XMM4                                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVADDSD -0x48(%RBP),%XMM2,%XMM3                              | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0.50 | 0.50 | 3       | 0.50              | scal (25.0%)\nVADDSD -0x40(%RBP),%XMM4,%XMM5                              | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0.50 | 0.50 | 3       | 0.50              | scal (25.0%)\nVMOVSD %XMM3,(%R14)                                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 1    | 0    | 1       | 1                 | scal (25.0%)\nVMOVSD %XMM5,(%R15)                                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 1    | 0    | 1       | 1                 | scal (25.0%)\nMOV (%R13),%RDI                                             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOV %R12,%RDX                                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.25              | scal (25.0%)\nMOV %RBX,%RSI                                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.25              | N/A\nMOVQ $0,-0x48(%RBP)                                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 4       | 1                 | scal (12.5%)\nMOV -0x58(%RBP),%RCX                                        | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOVQ $0,-0x40(%RBP)                                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 4       | 1                 | scal (12.5%)\nADD $0x8,%R13                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | N/A\nCALL 42100 <_ZNK8QuadTree14calculateForceEP8ParticleRdS2_>  | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 0       | 1                 | N/A\nVMOVSD (%R14),%XMM6                                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMOVSD (%R15),%XMM8                                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVADDSD -0x48(%RBP),%XMM6,%XMM7                              | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0.50 | 0.50 | 3       | 0.50              | scal (25.0%)\nVADDSD -0x40(%RBP),%XMM8,%XMM9                              | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0.50 | 0.50 | 3       | 0.50              | scal (25.0%)\nVMOVSD %XMM7,(%R14)                                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 1    | 0    | 1       | 1                 | scal (25.0%)\nVMOVSD %XMM9,(%R15)                                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 1    | 0    | 1       | 1                 | scal (25.0%)\nMOV (%R13),%RDI                                             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOV %R12,%RDX                                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.25              | scal (25.0%)\nMOV %RBX,%RSI                                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.25              | N/A\nMOVQ $0,-0x48(%RBP)                                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 4       | 1                 | scal (12.5%)\nMOV -0x58(%RBP),%RCX                                        | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOVQ $0,-0x40(%RBP)                                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 4       | 1                 | scal (12.5%)\nADD $0x8,%R13                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | N/A\nCALL 42100 <_ZNK8QuadTree14calculateForceEP8ParticleRdS2_>  | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 0       | 1                 | N/A\nVMOVSD (%R14),%XMM10                                        | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMOVSD (%R15),%XMM12                                        | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVADDSD -0x48(%RBP),%XMM10,%XMM11                            | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0.50 | 0.50 | 3       | 0.50              | scal (25.0%)\nVADDSD -0x40(%RBP),%XMM12,%XMM13                            | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0.50 | 0.50 | 3       | 0.50              | scal (25.0%)\nVMOVSD %XMM11,(%R14)                                        | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 1    | 0    | 1       | 1                 | scal (25.0%)\nVMOVSD %XMM13,(%R15)                                        | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 1    | 0    | 1       | 1                 | scal (25.0%)\nCMP %R13,-0x68(%RBP)                                        | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | scal (25.0%)\nJE 43275 <_ZN8QuadTree15updateParticlesEd._omp_fn.1+0x6d5>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | N/A\nINCQ -0x60(%RBP)                                            | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 1       | 1                 | scal (25.0%)\nMOV -0x78(%RBP),%RBX                                        | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOV -0x60(%RBP),%R11                                        | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | scal (25.0%)\nCMP %RBX,%R11                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nJAE 432a0 <_ZN8QuadTree15updateParticlesEd._omp_fn.1+0x700> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | N/A\nMOV -0x80(%RBP),%R13                                        | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nADD $0x8,%R14                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | N/A\nADD $0x8,%R15                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV 0x50(%R13),%R10                                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOV (%R10),%RDI                                             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nJMP 43020 <_ZN8QuadTree15updateParticlesEd._omp_fn.1+0x480> | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 2                 | N/A\n"
              }
            ],
          "header":
            [
            "Warnings:\nDetected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.",
            "1% of peak computational performance is used (0.32 out of 24.00 FLOP per cycle (GFLOPS @ 1GHz))"
            ],
          "brief":
            [

            ],
          "gain":
            [
              {
                "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                "title": "Code clean check",
                "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 18.50 to 6.50 cycles (2.85x speedup)."
              },
              {
                "workaround": " - Try another compiler or update/tune your current one\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:\nC storage order is row-major: for(i) for(j) a[j][i] = b[j][i]; (slow, non stride 1) => for(i) for(j) a[i][j] = b[i][j]; (fast, stride 1)<<image_row_maj>>\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                "details": "All SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized loop can use their full power.\n",
                "title": "Vectorization",
                "txt": "Your loop is not vectorized.\nOnly 22% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your loop, you can lower the cost of an iteration from 18.50 to 3.31 cycles (5.58x speedup)."
              },
              {
                "workaround": " - Read less array elements\n - Write less array elements\n - Provide more information to your compiler:\n  * hardcode the bounds of the corresponding 'for' loop\n",
                "title": "Execution units bottlenecks",
                "txt": "Performance is limited by:\n - reading data from caches/RAM (load units are a bottleneck)\n - writing data to caches/RAM (the store unit is a bottleneck)\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 18.50 to 17.00 cycles (1.09x speedup).\n"
              }
            ],
          "potential":
            [

            ]
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "details": "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - QuadTree::calculateForce(Particle*, double&, double&) const: 3 occurrences<<list_path_1_call_1>>\n",
                  "title": "CALL instructions",
                  "txt": "Detected function call instructions.\n"
                },
                {
                  "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - JMP: 1 occurrences<<list_path_1_complex_1>>\n",
                  "title": "Complex instructions",
                  "txt": "Detected COMPLEX INSTRUCTIONS.\n"
                },
                {
                  "title": "Type of elements and instruction set",
                  "txt": "6 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in scalar mode (one at a time).\n"
                },
                {
                  "title": "Matching between your loop (in the source code) and the binary loop",
                  "txt": "The binary loop is composed of 6 FP arithmetical operations:\n - 6: addition or subtraction\nThe binary loop is loading 268 bytes (33 double precision FP elements).\nThe binary loop is storing 112 bytes (14 double precision FP elements)."
                },
                {
                  "title": "Arithmetic intensity",
                  "txt": "Arithmetic intensity is 0.02 FP operations per loaded or stored byte."
                }
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 82\nnb uops            : 102\nloop length        : 364\nused x86 registers : 15\nused mmx registers : 0\nused xmm registers : 12\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 8\n"
                },
                {
                  "title": "Front-end",
                  "txt": "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 17.00 cycles\nfront end            : 17.00 cycles\n"
                },
                {
                  "title": "Back-end",
                  "txt": "       | ALU0/BRU0 | ALU1  | ALU2  | ALU3/BRU1 | AGU0  | AGU1  | AGU2  | FP0  | FP1  | FP2  | FP3\n--------------------------------------------------------------------------------------------------\nuops   | 10.25     | 10.25 | 10.25 | 10.25     | 18.50 | 18.50 | 13.00 | 0.00 | 0.00 | 6.00 | 6.00\ncycles | 10.25     | 10.25 | 10.25 | 10.25     | 18.50 | 18.50 | 13.00 | 0.00 | 0.00 | 6.00 | 6.00\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU, BRU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3/BRU1: ALU, BRU\n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2: store address\n - FP0 (256 bits): VPU\n - FP1 (256 bits): VPU\n - FP2 (256 bits): VPU, FP store data\n - FP3 (256 bits): VPU, DIV/SQRT\n\nCycles executing div or sqrt instructions: NA\nCycles loading/storing data              : 17.00\n"
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 17.00\nDispatch  : 18.50\nOverall L1: 18.50\n"
                },
                {
                  "title": "Vectorization ratios",
                  "txt": "INT\nall    : 0%\nload   : 0%\nstore  : 0%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 0%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 0%\nload    : 0%\nstore   : 0%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\nINT+FP\nall     : 0%\nload    : 0%\nstore   : 0%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\n"
                },
                {
                  "title": "Vector efficiency ratios",
                  "txt": "INT\nall    : 21%\nload   : 25%\nstore  : 15%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 25%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 25%\nFP\nall     : 25%\nload    : 25%\nstore   : 25%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 25%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\nINT+FP\nall     : 22%\nload    : 25%\nstore   : 19%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 25%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 25%\n"
                },
                {
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 18.50 cycles. At this rate:\n - 22% of peak load performance is reached (14.49 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 18% of peak store performance is reached (6.05 out of 32.00 bytes stored per cycle (GB/s @ 1GHz))\n"
                },
                {
                  "title": "Front-end bottlenecks",
                  "txt": "Found no such bottlenecks."
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the loop is: 43020\n\nInstruction                                                 | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0 | AGU1 | AGU2 | FP0 | FP1 | FP2  | FP3  | Latency | Recip. throughput | Vectorization\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nMOV -0x60(%RBP),%RBX                                        | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOV -0x70(%RBP),%R12                                        | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOV 0x12411(%RIP),%RAX                                      | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOV (%RDI,%RBX,8),%RBX                                      | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOV 0x8(%R12),%RDI                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOVSXD (%RAX),%R9                                           | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | N/A\nMOV (%RDI),%RSI                                             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nLEA (%R9,%R9,2),%R8                                         | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | N/A\nLEA (%RSI,%R8,8),%R10                                       | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV 0x8(%R10),%RDX                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | scal (25.0%)\nMOV (%R10),%RCX                                             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOV %RDX,-0x68(%RBP)                                        | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 4       | 1                 | scal (25.0%)\nCMP %RCX,%RDX                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nJE 432a0 <_ZN8QuadTree15updateParticlesEd._omp_fn.1+0x700>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | N/A\nSUB %RCX,%RDX                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nMOV %RCX,%R13                                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.25              | N/A\nLEA -0x48(%RBP),%R12                                        | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV %RDX,%RAX                                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.25              | N/A\nSUB $0x8,%RAX                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | N/A\nSHR $0x3,%RAX                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | N/A\nINC %RAX                                                    | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | N/A\nAND $0x3,%EAX                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | N/A\nJE 43163 <_ZN8QuadTree15updateParticlesEd._omp_fn.1+0x5c3>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | N/A\nCMP $0x1,%RAX                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nJE 43114 <_ZN8QuadTree15updateParticlesEd._omp_fn.1+0x574>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | N/A\nCMP $0x2,%RAX                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nJE 430cf <_ZN8QuadTree15updateParticlesEd._omp_fn.1+0x52f>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | N/A\nMOV (%RCX),%RDI                                             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOV -0x58(%RBP),%RCX                                        | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOV %R12,%RDX                                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.25              | scal (25.0%)\nMOV %RBX,%RSI                                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.25              | N/A\nMOVQ $0,-0x48(%RBP)                                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 4       | 1                 | scal (12.5%)\nMOVQ $0,-0x40(%RBP)                                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 4       | 1                 | scal (12.5%)\nADD $0x8,%R13                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | N/A\nCALL 42100 <_ZNK8QuadTree14calculateForceEP8ParticleRdS2_>  | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 0       | 1                 | N/A\nVMOVSD (%R14),%XMM2                                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMOVSD (%R15),%XMM4                                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVADDSD -0x48(%RBP),%XMM2,%XMM3                              | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0.50 | 0.50 | 3       | 0.50              | scal (25.0%)\nVADDSD -0x40(%RBP),%XMM4,%XMM5                              | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0.50 | 0.50 | 3       | 0.50              | scal (25.0%)\nVMOVSD %XMM3,(%R14)                                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 1    | 0    | 1       | 1                 | scal (25.0%)\nVMOVSD %XMM5,(%R15)                                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 1    | 0    | 1       | 1                 | scal (25.0%)\nMOV (%R13),%RDI                                             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOV %R12,%RDX                                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.25              | scal (25.0%)\nMOV %RBX,%RSI                                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.25              | N/A\nMOVQ $0,-0x48(%RBP)                                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 4       | 1                 | scal (12.5%)\nMOV -0x58(%RBP),%RCX                                        | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOVQ $0,-0x40(%RBP)                                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 4       | 1                 | scal (12.5%)\nADD $0x8,%R13                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | N/A\nCALL 42100 <_ZNK8QuadTree14calculateForceEP8ParticleRdS2_>  | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 0       | 1                 | N/A\nVMOVSD (%R14),%XMM6                                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMOVSD (%R15),%XMM8                                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVADDSD -0x48(%RBP),%XMM6,%XMM7                              | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0.50 | 0.50 | 3       | 0.50              | scal (25.0%)\nVADDSD -0x40(%RBP),%XMM8,%XMM9                              | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0.50 | 0.50 | 3       | 0.50              | scal (25.0%)\nVMOVSD %XMM7,(%R14)                                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 1    | 0    | 1       | 1                 | scal (25.0%)\nVMOVSD %XMM9,(%R15)                                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 1    | 0    | 1       | 1                 | scal (25.0%)\nMOV (%R13),%RDI                                             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOV %R12,%RDX                                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.25              | scal (25.0%)\nMOV %RBX,%RSI                                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.25              | N/A\nMOVQ $0,-0x48(%RBP)                                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 4       | 1                 | scal (12.5%)\nMOV -0x58(%RBP),%RCX                                        | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOVQ $0,-0x40(%RBP)                                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 4       | 1                 | scal (12.5%)\nADD $0x8,%R13                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | N/A\nCALL 42100 <_ZNK8QuadTree14calculateForceEP8ParticleRdS2_>  | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 0       | 1                 | N/A\nVMOVSD (%R14),%XMM10                                        | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMOVSD (%R15),%XMM12                                        | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVADDSD -0x48(%RBP),%XMM10,%XMM11                            | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0.50 | 0.50 | 3       | 0.50              | scal (25.0%)\nVADDSD -0x40(%RBP),%XMM12,%XMM13                            | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0.50 | 0.50 | 3       | 0.50              | scal (25.0%)\nVMOVSD %XMM11,(%R14)                                        | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 1    | 0    | 1       | 1                 | scal (25.0%)\nVMOVSD %XMM13,(%R15)                                        | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0   | 1    | 0    | 1       | 1                 | scal (25.0%)\nCMP %R13,-0x68(%RBP)                                        | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | scal (25.0%)\nJE 43275 <_ZN8QuadTree15updateParticlesEd._omp_fn.1+0x6d5>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | N/A\nINCQ -0x60(%RBP)                                            | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 1       | 1                 | scal (25.0%)\nMOV -0x78(%RBP),%RBX                                        | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOV -0x60(%RBP),%R11                                        | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | scal (25.0%)\nCMP %RBX,%R11                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nJAE 432a0 <_ZN8QuadTree15updateParticlesEd._omp_fn.1+0x700> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.50              | N/A\nMOV -0x80(%RBP),%R13                                        | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nADD $0x8,%R14                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | N/A\nADD $0x8,%R15                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV 0x50(%R13),%R10                                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nMOV (%R10),%RDI                                             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0   | 0    | 0    | 3       | 0.50              | N/A\nJMP 43020 <_ZN8QuadTree15updateParticlesEd._omp_fn.1+0x480> | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 2                 | N/A\n"
                }
              ],
            "header":
              [
              "Warnings:\nDetected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.",
              "1% of peak computational performance is used (0.32 out of 24.00 FLOP per cycle (GFLOPS @ 1GHz))"
              ],
            "brief":
              [

              ],
            "gain":
              [
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                  "title": "Code clean check",
                  "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 18.50 to 6.50 cycles (2.85x speedup)."
                },
                {
                  "workaround": " - Try another compiler or update/tune your current one\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:\nC storage order is row-major: for(i) for(j) a[j][i] = b[j][i]; (slow, non stride 1) => for(i) for(j) a[i][j] = b[i][j]; (fast, stride 1)<<image_row_maj>>\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                  "details": "All SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized loop can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your loop is not vectorized.\nOnly 22% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your loop, you can lower the cost of an iteration from 18.50 to 3.31 cycles (5.58x speedup)."
                },
                {
                  "workaround": " - Read less array elements\n - Write less array elements\n - Provide more information to your compiler:\n  * hardcode the bounds of the corresponding 'for' loop\n",
                  "title": "Execution units bottlenecks",
                  "txt": "Performance is limited by:\n - reading data from caches/RAM (load units are a bottleneck)\n - writing data to caches/RAM (the store unit is a bottleneck)\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 18.50 to 17.00 cycles (1.09x speedup).\n"
                }
              ],
            "potential":
              [

              ]
          }
        ],
      "common":
        {
          "header":
            [
            "The loop is defined in:\n - /usr/include/c++/14.2.1/bits/stl_vector.h:1131\n - /usr/include/c++/14.2.1/bits/stl_iterator.h:1068\n - /home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:277-282\n\n",
            "Warnings:\n - Non-innermost loop: analyzing only self part (ignoring child loops).\n - Ignoring paths for analysis\n - Too many paths. Rerun with max-paths=7\n - RecMII not computed since number of paths is unknown or > max_paths\n - Streams not analyzed since number of paths is unknown or > max_paths\n",
            "Try to simplify control and/or increase the maximum number of paths per function/loop through the 'max-paths-nb' option.\n",
            "This loop has 7 execution paths.\n",
            "The presence of multiple execution paths is typically the main/first bottleneck.\nTry to simplify control inside loop: ideally, try to remove all conditional expressions, for example by (if applicable):\n - hoisting them (moving them outside the loop)\n - turning them into conditional moves, MIN or MAX\n\n",
            "Ex: if (x<0) x=0 => x = (x<0 ? 0 : x) (or MAX(0,x) after defining the corresponding macro)\n"
            ],
          "nb_paths": 7
        }
    }
}
