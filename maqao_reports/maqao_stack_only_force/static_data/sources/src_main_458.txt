/usr/include/c++/14.2.1/bits/new_allocator.h: 172 - 172
--------------------------------------------------------------------------------

172: 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
/usr/include/c++/14.2.1/bits/deque.tcc: 565 - 568
--------------------------------------------------------------------------------

565:       this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
566:       _Alloc_traits::destroy(_M_get_Tp_allocator(),
567: 			     this->_M_impl._M_finish._M_cur);
568:     }
/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp: 144 - 183
--------------------------------------------------------------------------------

144:     return std::sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
[...]
151:     double dx = b->getX() - c->getX();
152:     double dy = b->getY() - c->getY();
153:     double distance = std::sqrt((dx * dx) + (dy * dy));
154:     double accel = (-1 * Particle::G * c->getMass()) / std::pow(distance,2.0);
155:     double forceVecX = dx / distance;
156:     double forceVecY = dy / distance;
157: 
158:     fx += accel * forceVecX;
159:     fy += accel * forceVecY;
160: }
[...]
166:     while (!stack.empty()) {
167:         const QuadTree* node = stack.top();
168:         stack.pop();
169: 
170:         if (!node->isDivided) {
171:             if (!node->hasBody) continue; // If the node is empty, we skip
172:             if (b != node->particle) {
[...]
178:             double s = node->width;
179:             double d = distance(b->getX(), b->getY(), node->particle->getX(), node->particle->getY());
180:             // If ratio > theta we perform recursively on each of the current node's children.
181:             if (s / d < theta) {
182:                 // Treat the internal node as a single body, and calculate the force it exerts on body b, and add this amount to b's net force.
183:                 calcForce(b, node->particle, fx, fy);
/usr/include/c++/14.2.1/bits/stl_deque.h: 212 - 1603
--------------------------------------------------------------------------------

212: 	if (_M_cur == _M_first)
[...]
265: 	_M_node = __new_node;
266: 	_M_first = *__new_node;
267: 	_M_last = _M_first + difference_type(_S_buffer_size());
[...]
1603: 	    --this->_M_impl._M_finish._M_cur;
