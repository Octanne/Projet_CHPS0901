{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_call_3":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:314",
                "/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:34"
                ],
              "header": ""
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_complex_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:357"
                ],
              "header": ""
            },
          "list_path_1_vec_align_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:352",
                "/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:319",
                "/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:32",
                "/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:32",
                "/usr/include/c++/14.2.1/bits/stl_vector.h:99",
                "/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:348",
                "/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:352",
                "/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:348",
                "/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:352",
                "/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:348",
                "/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:352",
                "/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:348",
                "/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:352"
                ],
              "header": ""
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_call_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [

                ],
              "header": ""
            },
          "list_path_1_call_2":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:335",
                "/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:335",
                "/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:335",
                "/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:335",
                "/home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:335"
                ],
              "header": ""
            }
        },
      "AVG":
        {
          "hint":
            [
              {
                "details": "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - QuadTree::reset(): 16 occurrences<<list_path_1_call_1>>\n - operator delete(void*): 5 occurrences<<list_path_1_call_2>>\n - operator new(unsigned long): 2 occurrences<<list_path_1_call_3>>\n",
                "title": "CALL instructions",
                "txt": "Detected function call instructions.\n"
              },
              {
                "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - JMP: 6 occurrences<<list_path_1_complex_1>>\n",
                "title": "Complex instructions",
                "txt": "Detected COMPLEX INSTRUCTIONS.\n"
              },
              {
                "workaround": " - Recompile with march=znver2.\nCQA target is AMD_fam17h_mod71h (3rd generation Ryzen 3/5/7/9 processors based on the Zen 2 microarchitecture) but specialization flags are -march=x86-64\n - Use vector aligned instructions:\n  1) align your arrays on 32 bytes boundaries: replace { void *p = malloc (size); } with { void *p; posix_memalign (&p, 32, size); }.\n  2) inform your compiler that your arrays are vector aligned: if array 'foo' is 32 bytes-aligned, define a pointer 'p_foo' as __builtin_assume_aligned (foo, 32) and use it instead of 'foo' in the loop.\n<<image_vec_align>>",
                "details": " - MOVUPS: 19 occurrences<<list_path_1_vec_align_1>>\n",
                "title": "Vector unaligned load/store instructions",
                "txt": "Detected 19 suboptimal vector unaligned load/store instructions.\n"
              },
              {
                "title": "Type of elements and instruction set",
                "txt": "No instructions are processing arithmetic or math operations on FP elements. This function is probably writing/copying data or processing integer elements."
              },
              {
                "title": "Matching between your function (in the source code) and the binary function",
                "txt": "The binary function does not contain any FP arithmetical operations.\nThe binary function is loading 373 bytes.\nThe binary function is storing 580 bytes."
              }
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 192\nnb uops            : 337\nloop length        : 912\nused x86 registers : 10\nused mmx registers : 0\nused xmm registers : 3\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 2\n"
              },
              {
                "title": "Front-end",
                "txt": "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 56.17 cycles\nfront end            : 56.17 cycles\n"
              },
              {
                "title": "Back-end",
                "txt": "       | ALU0/BRU0 | ALU1  | ALU2  | ALU3/BRU1 | AGU0  | AGU1  | AGU2  | FP0  | FP1  | FP2   | FP3\n---------------------------------------------------------------------------------------------------\nuops   | 37.75     | 37.75 | 37.75 | 37.75     | 41.33 | 41.33 | 41.33 | 0.50 | 0.50 | 31.00 | 0.00\ncycles | 37.75     | 37.75 | 37.75 | 37.75     | 41.33 | 41.33 | 41.33 | 0.50 | 0.50 | 31.00 | 0.00\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU, BRU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3/BRU1: ALU, BRU\n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2: store address\n - FP0 (256 bits): VPU\n - FP1 (256 bits): VPU\n - FP2 (256 bits): VPU, FP store data\n - FP3 (256 bits): VPU, DIV/SQRT\n\nCycles executing div or sqrt instructions: NA\nCycles loading/storing data              : 56.00\n"
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 56.17\nDispatch  : 41.33\nOverall L1: 56.17\n"
              },
              {
                "title": "Vectorization ratios",
                "txt": "INT\nall    : 15%\nload   : 0%\nstore  : 0%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 36%\nFP\nall     : 68%\nload    : 50%\nstore   : 77%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\nINT+FP\nall     : 35%\nload    : 15%\nstore   : 48%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 35%\n"
              },
              {
                "title": "Vector efficiency ratios",
                "txt": "INT\nall    : 23%\nload   : 21%\nstore  : 13%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 27%\nFP\nall     : 42%\nload    : 37%\nstore   : 44%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 25%\nINT+FP\nall     : 30%\nload    : 26%\nstore   : 32%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 27%\n"
              },
              {
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each call to the function takes 56.17 cycles. At this rate:\n - 10% of peak load performance is reached (6.64 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 32% of peak store performance is reached (10.33 out of 32.00 bytes stored per cycle (GB/s @ 1GHz))\n"
              },
              {
                "title": "Front-end bottlenecks",
                "txt": "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 56.17 to 41.33 cycles (1.36x speedup).\n"
              },
              {
                "title": "ASM code",
                "txt": "In the binary file, the address of the function is: 2ba80\n\nInstruction                                 | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2 | FP3 | Latency | Recip. throughput | Vectorization\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nPUSH %R12                                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 1                 | N/A\nUNPCKLPD %XMM2,%XMM1                        | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.50 | 0.50 | 0   | 0   | 1       | 0.50              | scal (25.0%)\nPUSH %RBP                                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 1                 | N/A\nPUSH %RBX                                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 1                 | N/A\nSUB $0x20,%RSP                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nMOV 0x11995(%RIP),%RAX                      | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nCMP %RAX,0x11986(%RIP)                      | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | scal (25.0%)\nJE 2baf0 <_ZN8QuadTree7getNodeEdddi+0x70>   | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nMOV -0x8(%RAX),%RBX                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV %EDI,%EBP                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | scal (12.5%)\nSUB $0x8,%RAX                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nMOV %RAX,0x1197b(%RIP)                      | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV (%RBX),%RDI                             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nTEST %RDI,%RDI                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | scal (25.0%)\nJE 2babf <_ZN8QuadTree7getNodeEdddi+0x3f>   | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nCMPB $0,0x8(%RBX)                           | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | scal (3.1%)\nJNE 2bb70 <_ZN8QuadTree7getNodeEdddi+0xf0>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nXOR %EAX,%EAX                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | N/A\nPXOR %XMM2,%XMM2                            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nMOVQ $0,(%RBX)                              | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOV %AX,0x8(%RBX)                           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | N/A\nMOV %RBX,%RAX                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | N/A\nMOV %EBP,0x18(%RBX)                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVUPS %XMM2,0x30(%RBX)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nMOVUPS %XMM2,0x40(%RBX)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nMOVSD %XMM0,0x10(%RBX)                      | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nMOVUPS %XMM1,0x20(%RBX)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nADD $0x20,%RSP                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nPOP %RBX                                    | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPOP %RBP                                    | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPOP %R12                                    | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nRET                                         | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nMOV $0x58,%EDI                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | scal (12.5%)\nMOVSD %XMM0,0x18(%RSP)                      | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nMOVAPS %XMM1,(%RSP)                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nCALL 4110 <_Znwm@plt>                       | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOVSD 0x18(%RSP),%XMM0                      | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | scal (25.0%)\nXOR %R8D,%R8D                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | scal (12.5%)\nMOVAPD (%RSP),%XMM1                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | vect (50.0%)\nMOVQ $0,(%RAX)                              | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOV $0x18,%EDI                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | scal (12.5%)\nMOV %RAX,%RBX                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | N/A\nMOV %R8W,0x8(%RAX)                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | N/A\nMOVL $0,0x18(%RAX)                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVSD %XMM0,0x10(%RAX)                      | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nPXOR %XMM0,%XMM0                            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nMOVUPS %XMM1,0x20(%RAX)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nMOVUPS %XMM0,0x30(%RAX)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nMOVUPS %XMM0,0x40(%RAX)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nCALL 4110 <_Znwm@plt>                       | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nPXOR %XMM0,%XMM0                            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nMOVQ $0,0x10(%RAX)                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOV %RAX,0x50(%RBX)                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOVUPS %XMM0,(%RAX)                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nADD $0x20,%RSP                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nMOV %RBX,%RAX                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | N/A\nPOP %RBX                                    | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPOP %RBP                                    | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPOP %R12                                    | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nRET                                         | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nNOPW %CS:(%RAX,%RAX,1)                      | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nMOVSD %XMM0,0x18(%RSP)                      | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nMOVAPS %XMM1,(%RSP)                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nCALL 43e0 <_ZdlPv@plt>                      | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x30(%RBX),%R12                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOVAPD (%RSP),%XMM1                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | vect (50.0%)\nMOVSD 0x18(%RSP),%XMM0                      | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | scal (25.0%)\nMOV (%R12),%RDI                             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nTEST %RDI,%RDI                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | scal (25.0%)\nJE 2bba3 <_ZN8QuadTree7getNodeEdddi+0x123>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nCMPB $0,0x8(%R12)                           | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | scal (3.1%)\nJNE 2bce8 <_ZN8QuadTree7getNodeEdddi+0x268> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPXOR %XMM2,%XMM2                            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nXOR %EDI,%EDI                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | scal (12.5%)\nMOVQ $0,(%R12)                              | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVUPS %XMM2,0x20(%R12)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nPXOR %XMM2,%XMM2                            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nMOV %DI,0x8(%R12)                           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | N/A\nMOVL $0,0x18(%R12)                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVQ $0,0x10(%R12)                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVUPS %XMM2,0x30(%R12)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nMOVUPS %XMM2,0x40(%R12)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nMOV 0x38(%RBX),%R12                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV (%R12),%RDI                             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nTEST %RDI,%RDI                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | scal (25.0%)\nJE 2bbf8 <_ZN8QuadTree7getNodeEdddi+0x178>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nCMPB $0,0x8(%R12)                           | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | scal (3.1%)\nJNE 2bdc0 <_ZN8QuadTree7getNodeEdddi+0x340> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPXOR %XMM2,%XMM2                            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nXOR %ESI,%ESI                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | scal (12.5%)\nMOVQ $0,(%R12)                              | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVUPS %XMM2,0x20(%R12)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nPXOR %XMM2,%XMM2                            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nMOV %SI,0x8(%R12)                           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | N/A\nMOVL $0,0x18(%R12)                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVQ $0,0x10(%R12)                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVUPS %XMM2,0x30(%R12)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nMOVUPS %XMM2,0x40(%R12)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nMOV 0x40(%RBX),%R12                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV (%R12),%RDI                             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nTEST %RDI,%RDI                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | scal (25.0%)\nJE 2bc4d <_ZN8QuadTree7getNodeEdddi+0x1cd>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nCMPB $0,0x8(%R12)                           | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | scal (3.1%)\nJNE 2bd70 <_ZN8QuadTree7getNodeEdddi+0x2f0> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPXOR %XMM2,%XMM2                            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nXOR %ECX,%ECX                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | scal (12.5%)\nMOVQ $0,(%R12)                              | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVUPS %XMM2,0x20(%R12)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nPXOR %XMM2,%XMM2                            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nMOV %CX,0x8(%R12)                           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | N/A\nMOVL $0,0x18(%R12)                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVQ $0,0x10(%R12)                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVUPS %XMM2,0x30(%R12)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nMOVUPS %XMM2,0x40(%R12)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nMOV 0x48(%RBX),%R12                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV (%R12),%RDI                             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nTEST %RDI,%RDI                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | scal (25.0%)\nJE 2bca2 <_ZN8QuadTree7getNodeEdddi+0x222>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nCMPB $0,0x8(%R12)                           | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nJNE 2bd28 <_ZN8QuadTree7getNodeEdddi+0x2a8> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPXOR %XMM2,%XMM2                            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nXOR %EDX,%EDX                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | scal (12.5%)\nMOVQ $0,(%R12)                              | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVUPS %XMM2,0x20(%R12)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nPXOR %XMM2,%XMM2                            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nMOV %DX,0x8(%R12)                           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | N/A\nMOVL $0,0x18(%R12)                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVQ $0,0x10(%R12)                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVUPS %XMM2,0x30(%R12)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nMOVUPS %XMM2,0x40(%R12)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nJMP 2babf <_ZN8QuadTree7getNodeEdddi+0x3f>  | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 2                 | N/A\nNOPL (%RAX,%RAX,1)                          | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nCALL 43e0 <_ZdlPv@plt>                      | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x30(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x38(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x40(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x48(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOVSD 0x18(%RSP),%XMM0                      | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | scal (25.0%)\nMOVAPD (%RSP),%XMM1                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | vect (50.0%)\nJMP 2bba3 <_ZN8QuadTree7getNodeEdddi+0x123> | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 2                 | N/A\nNOPL (%RAX)                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nMOVSD %XMM0,0x18(%RSP)                      | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nMOVAPS %XMM1,(%RSP)                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nCALL 43e0 <_ZdlPv@plt>                      | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x30(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x38(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x40(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x48(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOVSD 0x18(%RSP),%XMM0                      | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | scal (25.0%)\nMOVAPD (%RSP),%XMM1                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | vect (50.0%)\nJMP 2bca2 <_ZN8QuadTree7getNodeEdddi+0x222> | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 2                 | N/A\nNOP                                         | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nMOVSD %XMM0,0x18(%RSP)                      | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nMOVAPS %XMM1,(%RSP)                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nCALL 43e0 <_ZdlPv@plt>                      | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x30(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x38(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x40(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x48(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOVSD 0x18(%RSP),%XMM0                      | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | scal (25.0%)\nMOVAPD (%RSP),%XMM1                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | vect (50.0%)\nJMP 2bc4d <_ZN8QuadTree7getNodeEdddi+0x1cd> | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 2                 | N/A\nNOPW (%RAX,%RAX,1)                          | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nMOVSD %XMM0,0x18(%RSP)                      | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nMOVAPS %XMM1,(%RSP)                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nCALL 43e0 <_ZdlPv@plt>                      | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x30(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x38(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x40(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x48(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOVSD 0x18(%RSP),%XMM0                      | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | scal (25.0%)\nMOVAPD (%RSP),%XMM1                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | vect (50.0%)\nJMP 2bbf8 <_ZN8QuadTree7getNodeEdddi+0x178> | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 2                 | N/A\nMOV %RAX,%RBP                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | scal (25.0%)\nJMP 570c <_ZN8QuadTree7getNodeEdddi.cold>   | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 2                 | N/A\nNOP                                         | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\n"
              }
            ],
          "header":
            [
            "Warnings:\nDetected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.",
            "0% of peak computational performance is used (0.00 out of 48.00 FLOP per cycle (GFLOPS @ 1GHz))"
            ],
          "brief":
            [

            ],
          "gain":
            [
              {
                "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                "title": "Code clean check",
                "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 56.17 to 31.00 cycles (1.81x speedup)."
              },
              {
                "workaround": " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                "details": "35% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 15% of SSE/AVX loads are used in vector version.\n - 48% of SSE/AVX stores are used in vector version.\n - 35% of SSE/AVX instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized function can use their full power.\n",
                "title": "Vectorization",
                "txt": "Your function is poorly vectorized.\nOnly 30% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your function, you can lower the cost of an iteration from 56.17 to 13.75 cycles (4.08x speedup)."
              },
              {
                "title": "Execution units bottlenecks",
                "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks."
              }
            ],
          "potential":
            [

            ]
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "details": "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - QuadTree::reset(): 16 occurrences<<list_path_1_call_1>>\n - operator delete(void*): 5 occurrences<<list_path_1_call_2>>\n - operator new(unsigned long): 2 occurrences<<list_path_1_call_3>>\n",
                  "title": "CALL instructions",
                  "txt": "Detected function call instructions.\n"
                },
                {
                  "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - JMP: 6 occurrences<<list_path_1_complex_1>>\n",
                  "title": "Complex instructions",
                  "txt": "Detected COMPLEX INSTRUCTIONS.\n"
                },
                {
                  "workaround": " - Recompile with march=znver2.\nCQA target is AMD_fam17h_mod71h (3rd generation Ryzen 3/5/7/9 processors based on the Zen 2 microarchitecture) but specialization flags are -march=x86-64\n - Use vector aligned instructions:\n  1) align your arrays on 32 bytes boundaries: replace { void *p = malloc (size); } with { void *p; posix_memalign (&p, 32, size); }.\n  2) inform your compiler that your arrays are vector aligned: if array 'foo' is 32 bytes-aligned, define a pointer 'p_foo' as __builtin_assume_aligned (foo, 32) and use it instead of 'foo' in the loop.\n<<image_vec_align>>",
                  "details": " - MOVUPS: 19 occurrences<<list_path_1_vec_align_1>>\n",
                  "title": "Vector unaligned load/store instructions",
                  "txt": "Detected 19 suboptimal vector unaligned load/store instructions.\n"
                },
                {
                  "title": "Type of elements and instruction set",
                  "txt": "No instructions are processing arithmetic or math operations on FP elements. This function is probably writing/copying data or processing integer elements."
                },
                {
                  "title": "Matching between your function (in the source code) and the binary function",
                  "txt": "The binary function does not contain any FP arithmetical operations.\nThe binary function is loading 373 bytes.\nThe binary function is storing 580 bytes."
                }
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 192\nnb uops            : 337\nloop length        : 912\nused x86 registers : 10\nused mmx registers : 0\nused xmm registers : 3\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 2\n"
                },
                {
                  "title": "Front-end",
                  "txt": "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 56.17 cycles\nfront end            : 56.17 cycles\n"
                },
                {
                  "title": "Back-end",
                  "txt": "       | ALU0/BRU0 | ALU1  | ALU2  | ALU3/BRU1 | AGU0  | AGU1  | AGU2  | FP0  | FP1  | FP2   | FP3\n---------------------------------------------------------------------------------------------------\nuops   | 37.75     | 37.75 | 37.75 | 37.75     | 41.33 | 41.33 | 41.33 | 0.50 | 0.50 | 31.00 | 0.00\ncycles | 37.75     | 37.75 | 37.75 | 37.75     | 41.33 | 41.33 | 41.33 | 0.50 | 0.50 | 31.00 | 0.00\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU, BRU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3/BRU1: ALU, BRU\n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2: store address\n - FP0 (256 bits): VPU\n - FP1 (256 bits): VPU\n - FP2 (256 bits): VPU, FP store data\n - FP3 (256 bits): VPU, DIV/SQRT\n\nCycles executing div or sqrt instructions: NA\nCycles loading/storing data              : 56.00\n"
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 56.17\nDispatch  : 41.33\nOverall L1: 56.17\n"
                },
                {
                  "title": "Vectorization ratios",
                  "txt": "INT\nall    : 15%\nload   : 0%\nstore  : 0%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 36%\nFP\nall     : 68%\nload    : 50%\nstore   : 77%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\nINT+FP\nall     : 35%\nload    : 15%\nstore   : 48%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 35%\n"
                },
                {
                  "title": "Vector efficiency ratios",
                  "txt": "INT\nall    : 23%\nload   : 21%\nstore  : 13%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 27%\nFP\nall     : 42%\nload    : 37%\nstore   : 44%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 25%\nINT+FP\nall     : 30%\nload    : 26%\nstore   : 32%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 27%\n"
                },
                {
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each call to the function takes 56.17 cycles. At this rate:\n - 10% of peak load performance is reached (6.64 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 32% of peak store performance is reached (10.33 out of 32.00 bytes stored per cycle (GB/s @ 1GHz))\n"
                },
                {
                  "title": "Front-end bottlenecks",
                  "txt": "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 56.17 to 41.33 cycles (1.36x speedup).\n"
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the function is: 2ba80\n\nInstruction                                 | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2 | FP3 | Latency | Recip. throughput | Vectorization\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nPUSH %R12                                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 1                 | N/A\nUNPCKLPD %XMM2,%XMM1                        | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.50 | 0.50 | 0   | 0   | 1       | 0.50              | scal (25.0%)\nPUSH %RBP                                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 1                 | N/A\nPUSH %RBX                                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 1                 | N/A\nSUB $0x20,%RSP                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nMOV 0x11995(%RIP),%RAX                      | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nCMP %RAX,0x11986(%RIP)                      | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | scal (25.0%)\nJE 2baf0 <_ZN8QuadTree7getNodeEdddi+0x70>   | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nMOV -0x8(%RAX),%RBX                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV %EDI,%EBP                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | scal (12.5%)\nSUB $0x8,%RAX                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nMOV %RAX,0x1197b(%RIP)                      | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV (%RBX),%RDI                             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nTEST %RDI,%RDI                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | scal (25.0%)\nJE 2babf <_ZN8QuadTree7getNodeEdddi+0x3f>   | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nCMPB $0,0x8(%RBX)                           | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | scal (3.1%)\nJNE 2bb70 <_ZN8QuadTree7getNodeEdddi+0xf0>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nXOR %EAX,%EAX                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | N/A\nPXOR %XMM2,%XMM2                            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nMOVQ $0,(%RBX)                              | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOV %AX,0x8(%RBX)                           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | N/A\nMOV %RBX,%RAX                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | N/A\nMOV %EBP,0x18(%RBX)                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVUPS %XMM2,0x30(%RBX)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nMOVUPS %XMM2,0x40(%RBX)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nMOVSD %XMM0,0x10(%RBX)                      | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nMOVUPS %XMM1,0x20(%RBX)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nADD $0x20,%RSP                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nPOP %RBX                                    | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPOP %RBP                                    | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPOP %R12                                    | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nRET                                         | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nMOV $0x58,%EDI                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | scal (12.5%)\nMOVSD %XMM0,0x18(%RSP)                      | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nMOVAPS %XMM1,(%RSP)                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nCALL 4110 <_Znwm@plt>                       | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOVSD 0x18(%RSP),%XMM0                      | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | scal (25.0%)\nXOR %R8D,%R8D                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | scal (12.5%)\nMOVAPD (%RSP),%XMM1                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | vect (50.0%)\nMOVQ $0,(%RAX)                              | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOV $0x18,%EDI                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | scal (12.5%)\nMOV %RAX,%RBX                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | N/A\nMOV %R8W,0x8(%RAX)                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | N/A\nMOVL $0,0x18(%RAX)                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVSD %XMM0,0x10(%RAX)                      | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nPXOR %XMM0,%XMM0                            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nMOVUPS %XMM1,0x20(%RAX)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nMOVUPS %XMM0,0x30(%RAX)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nMOVUPS %XMM0,0x40(%RAX)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nCALL 4110 <_Znwm@plt>                       | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nPXOR %XMM0,%XMM0                            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nMOVQ $0,0x10(%RAX)                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOV %RAX,0x50(%RBX)                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOVUPS %XMM0,(%RAX)                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nADD $0x20,%RSP                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nMOV %RBX,%RAX                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | N/A\nPOP %RBX                                    | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPOP %RBP                                    | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPOP %R12                                    | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nRET                                         | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nNOPW %CS:(%RAX,%RAX,1)                      | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nMOVSD %XMM0,0x18(%RSP)                      | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nMOVAPS %XMM1,(%RSP)                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nCALL 43e0 <_ZdlPv@plt>                      | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x30(%RBX),%R12                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOVAPD (%RSP),%XMM1                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | vect (50.0%)\nMOVSD 0x18(%RSP),%XMM0                      | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | scal (25.0%)\nMOV (%R12),%RDI                             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nTEST %RDI,%RDI                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | scal (25.0%)\nJE 2bba3 <_ZN8QuadTree7getNodeEdddi+0x123>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nCMPB $0,0x8(%R12)                           | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | scal (3.1%)\nJNE 2bce8 <_ZN8QuadTree7getNodeEdddi+0x268> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPXOR %XMM2,%XMM2                            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nXOR %EDI,%EDI                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | scal (12.5%)\nMOVQ $0,(%R12)                              | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVUPS %XMM2,0x20(%R12)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nPXOR %XMM2,%XMM2                            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nMOV %DI,0x8(%R12)                           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | N/A\nMOVL $0,0x18(%R12)                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVQ $0,0x10(%R12)                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVUPS %XMM2,0x30(%R12)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nMOVUPS %XMM2,0x40(%R12)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nMOV 0x38(%RBX),%R12                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV (%R12),%RDI                             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nTEST %RDI,%RDI                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | scal (25.0%)\nJE 2bbf8 <_ZN8QuadTree7getNodeEdddi+0x178>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nCMPB $0,0x8(%R12)                           | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | scal (3.1%)\nJNE 2bdc0 <_ZN8QuadTree7getNodeEdddi+0x340> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPXOR %XMM2,%XMM2                            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nXOR %ESI,%ESI                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | scal (12.5%)\nMOVQ $0,(%R12)                              | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVUPS %XMM2,0x20(%R12)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nPXOR %XMM2,%XMM2                            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nMOV %SI,0x8(%R12)                           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | N/A\nMOVL $0,0x18(%R12)                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVQ $0,0x10(%R12)                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVUPS %XMM2,0x30(%R12)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nMOVUPS %XMM2,0x40(%R12)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nMOV 0x40(%RBX),%R12                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV (%R12),%RDI                             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nTEST %RDI,%RDI                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | scal (25.0%)\nJE 2bc4d <_ZN8QuadTree7getNodeEdddi+0x1cd>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nCMPB $0,0x8(%R12)                           | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | scal (3.1%)\nJNE 2bd70 <_ZN8QuadTree7getNodeEdddi+0x2f0> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPXOR %XMM2,%XMM2                            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nXOR %ECX,%ECX                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | scal (12.5%)\nMOVQ $0,(%R12)                              | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVUPS %XMM2,0x20(%R12)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nPXOR %XMM2,%XMM2                            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nMOV %CX,0x8(%R12)                           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | N/A\nMOVL $0,0x18(%R12)                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVQ $0,0x10(%R12)                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVUPS %XMM2,0x30(%R12)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nMOVUPS %XMM2,0x40(%R12)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nMOV 0x48(%RBX),%R12                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV (%R12),%RDI                             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nTEST %RDI,%RDI                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | scal (25.0%)\nJE 2bca2 <_ZN8QuadTree7getNodeEdddi+0x222>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nCMPB $0,0x8(%R12)                           | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nJNE 2bd28 <_ZN8QuadTree7getNodeEdddi+0x2a8> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPXOR %XMM2,%XMM2                            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nXOR %EDX,%EDX                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | scal (12.5%)\nMOVQ $0,(%R12)                              | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVUPS %XMM2,0x20(%R12)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nPXOR %XMM2,%XMM2                            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nMOV %DX,0x8(%R12)                           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | N/A\nMOVL $0,0x18(%R12)                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVQ $0,0x10(%R12)                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVUPS %XMM2,0x30(%R12)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nMOVUPS %XMM2,0x40(%R12)                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nJMP 2babf <_ZN8QuadTree7getNodeEdddi+0x3f>  | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 2                 | N/A\nNOPL (%RAX,%RAX,1)                          | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nCALL 43e0 <_ZdlPv@plt>                      | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x30(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x38(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x40(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x48(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOVSD 0x18(%RSP),%XMM0                      | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | scal (25.0%)\nMOVAPD (%RSP),%XMM1                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | vect (50.0%)\nJMP 2bba3 <_ZN8QuadTree7getNodeEdddi+0x123> | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 2                 | N/A\nNOPL (%RAX)                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nMOVSD %XMM0,0x18(%RSP)                      | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nMOVAPS %XMM1,(%RSP)                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nCALL 43e0 <_ZdlPv@plt>                      | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x30(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x38(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x40(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x48(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOVSD 0x18(%RSP),%XMM0                      | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | scal (25.0%)\nMOVAPD (%RSP),%XMM1                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | vect (50.0%)\nJMP 2bca2 <_ZN8QuadTree7getNodeEdddi+0x222> | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 2                 | N/A\nNOP                                         | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nMOVSD %XMM0,0x18(%RSP)                      | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nMOVAPS %XMM1,(%RSP)                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nCALL 43e0 <_ZdlPv@plt>                      | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x30(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x38(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x40(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x48(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOVSD 0x18(%RSP),%XMM0                      | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | scal (25.0%)\nMOVAPD (%RSP),%XMM1                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | vect (50.0%)\nJMP 2bc4d <_ZN8QuadTree7getNodeEdddi+0x1cd> | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 2                 | N/A\nNOPW (%RAX,%RAX,1)                          | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nMOVSD %XMM0,0x18(%RSP)                      | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nMOVAPS %XMM1,(%RSP)                         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 4       | 1                 | vect (50.0%)\nCALL 43e0 <_ZdlPv@plt>                      | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x30(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x38(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x40(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV 0x48(%R12),%RDI                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nCALL 2b870 <_ZN8QuadTree5resetEv>           | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOVSD 0x18(%RSP),%XMM0                      | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | scal (25.0%)\nMOVAPD (%RSP),%XMM1                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | vect (50.0%)\nJMP 2bbf8 <_ZN8QuadTree7getNodeEdddi+0x178> | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 2                 | N/A\nMOV %RAX,%RBP                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | scal (25.0%)\nJMP 570c <_ZN8QuadTree7getNodeEdddi.cold>   | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 2                 | N/A\nNOP                                         | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\n"
                }
              ],
            "header":
              [
              "Warnings:\nDetected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.",
              "0% of peak computational performance is used (0.00 out of 48.00 FLOP per cycle (GFLOPS @ 1GHz))"
              ],
            "brief":
              [

              ],
            "gain":
              [
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                  "title": "Code clean check",
                  "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 56.17 to 31.00 cycles (1.81x speedup)."
                },
                {
                  "workaround": " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                  "details": "35% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 15% of SSE/AVX loads are used in vector version.\n - 48% of SSE/AVX stores are used in vector version.\n - 35% of SSE/AVX instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized function can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your function is poorly vectorized.\nOnly 30% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your function, you can lower the cost of an iteration from 56.17 to 13.75 cycles (4.08x speedup)."
                },
                {
                  "title": "Execution units bottlenecks",
                  "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks."
                }
              ],
            "potential":
              [

              ]
          }
        ],
      "common":
        {
          "header":
            [
            "The function is defined in:\n - /usr/include/c++/14.2.1/bits/stl_vector.h:99,1327\n - /usr/include/c++/14.2.1/bits/stl_iterator.h:1068\n - /home/corentin/Documents/Cours/M2/CHPS0901/Projet_CHPS0901/sources/quadtree.cpp:31-34,312-321,334-357\n\n",
            "Warnings:\n - Ignoring paths for analysis\n - Failed to get the number of paths\n"
            ]
        }
    }
}
